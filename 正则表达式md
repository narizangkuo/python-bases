
正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。
**正则表达式所面向的问题：**


1. 判断一个字符串是否匹配给定的格式
    **eg.** 判断用户注册账号是否满足格式
2. 从一个字符串中按指定格式提取信息
    **eg.** 抓取页面中的链接
`import re 

def is_valid_email(addr):
    return len(re.findall(r'^[a-zA-Z0-9\._]+@[a-zA-Z0-9]+\.com$', addr)) == 1  
#r python取消转义
#\ 正则表达式取消转义

assert is_valid_email('someone@gmail.com')
assert is_valid_email('bill.gates@microsoft.com')
assert not is_valid_email('bob#example.com')
assert not is_valid_email('mr-bob@example.com')
print('ok')`

开始：
**1. 一个函数:  re.findall(pattern, string)**
**2. 一些元字符: . * ? + [] () \ ^ $**
        重复元字符
        （贪婪）任意多个： *                 （非贪婪）任意多个： *？
        （贪婪）一个或多个:+                （非贪婪）一个或多个: +?
        （贪婪）一个或没有:?                 （非贪婪）一个或没有: ??
        （贪婪）N个:{N}
        （贪婪）M~N个: {M, N}
        （贪婪）至少M个:{M,}
        转义元字符 ---\
        元字符（有特殊含义）       \ 为特殊含义

    二（多）选一: |
        选的是两个正则表达式
    字符组： [...]
        选择的是多个字符中的一个
    
                    ***预定义字符类***
| 预定义字符类 |说明  |对等字符类  |
| --- | --- | --- |
| \d | 任一数字字符 | [0-9]  |
| \D | 任一非数字字符 | [^0-9] |
|  \s|  任一空白字符| [\t\n\x0B\f\r] |
|  \S|  任意分空白字符| [^\t\n]x0B\f\r] |
|  \w|  任一字母数字字符| [a-zA-Z0-9] |
|  \W|  任一非字母数字字符| [^a-zA-Z0-9] |

**3. 通过() 来改变findall的行为**




